{"ast":null,"code":"import { Observable, BehaviorSubject, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport * as moment from \"moment\";\nimport * as i0 from \"@angular/core\";\nexport let AudioService = /*#__PURE__*/(() => {\n  class AudioService {\n    constructor() {\n      this.stop$ = new Subject();\n      this.audioObj = new Audio();\n      this.audioEvents = [\"ended\", \"error\", \"play\", \"playing\", \"pause\", \"timeupdate\", \"canplay\", \"loadedmetadata\", \"loadstart\"]; // Estado inicial\n\n      this.state = {\n        playing: false,\n        readableCurrentTime: '',\n        readableDuration: '',\n        duration: undefined,\n        currentTime: undefined,\n        canplay: false,\n        error: false\n      }; // Obervable del estado\n\n      this.stateChange = new BehaviorSubject(this.state);\n    } // Toma el evento y actualiza stateChange\n\n\n    updateStateEvents(event) {\n      switch (event.type) {\n        case \"canplay\":\n          this.state.duration = this.audioObj.duration;\n          this.state.readableDuration = this.formatTime(this.state.duration);\n          this.state.canplay = true;\n          break;\n\n        case \"playing\":\n          this.state.playing = true;\n          break;\n\n        case \"pause\":\n          this.state.playing = false;\n          break;\n\n        case \"timeupdate\":\n          this.state.currentTime = this.audioObj.currentTime;\n          this.state.readableCurrentTime = this.formatTime(this.state.currentTime);\n          break;\n\n        case \"error\":\n          this.resetState();\n          this.state.error = true;\n          break;\n      }\n\n      this.stateChange.next(this.state);\n    }\n\n    resetState() {\n      this.state = {\n        playing: false,\n        readableCurrentTime: '',\n        readableDuration: '',\n        duration: undefined,\n        currentTime: undefined,\n        canplay: false,\n        error: false\n      };\n    }\n\n    getState() {\n      return this.stateChange.asObservable();\n    }\n\n    streamObservable(url) {\n      return new Observable(observer => {\n        // Play audio\n        this.audioObj.src = url;\n        this.audioObj.load();\n        this.audioObj.play();\n\n        const handler = event => {\n          this.updateStateEvents(event);\n          observer.next(event);\n        };\n\n        this.addEvents(this.audioObj, this.audioEvents, handler);\n        return () => {\n          // Stop Playing\n          this.audioObj.pause();\n          this.audioObj.currentTime = 0; // borra event listeners\n\n          this.removeEvents(this.audioObj, this.audioEvents, handler); // reinicia estado\n\n          this.resetState();\n        };\n      });\n    }\n\n    addEvents(obj, events, handler) {\n      events.forEach(event => {\n        obj.addEventListener(event, handler);\n      });\n    }\n\n    removeEvents(obj, events, handler) {\n      events.forEach(event => {\n        obj.removeEventListener(event, handler);\n      });\n    }\n\n    playStream(url) {\n      return this.streamObservable(url).pipe(takeUntil(this.stop$));\n    }\n\n    play() {\n      this.audioObj.play();\n    }\n\n    pause() {\n      this.audioObj.pause();\n    }\n\n    stop() {\n      this.audioObj.load();\n    }\n\n    formatTime(time, format = \"HH:mm:ss\") {\n      const momentTime = time * 1000;\n      return moment.utc(momentTime).format(format);\n    }\n\n  }\n\n  AudioService.ɵfac = function AudioService_Factory(t) {\n    return new (t || AudioService)();\n  };\n\n  AudioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AudioService,\n    factory: AudioService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AudioService;\n})();","map":null,"metadata":{},"sourceType":"module"}